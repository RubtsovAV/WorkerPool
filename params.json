{"name":"Workerpool","tagline":"Parallel Processing WorkerPool for PHP","body":"WorkerPool \r\n==========\r\n\r\n[![Build Status](https://travis-ci.org/qxsch/WorkerPool.svg?branch=master)](https://travis-ci.org/qxsch/WorkerPool)\r\n![Project Status](http://stillmaintained.com/qxsch/WorkerPool.png)\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/qxsch/worker-pool/v/stable.png)](https://packagist.org/packages/qxsch/worker-pool) [![Total Downloads](https://poser.pugx.org/qxsch/worker-pool/downloads.png)](https://packagist.org/packages/qxsch/worker-pool) [![License](https://poser.pugx.org/qxsch/worker-pool/license.png)](https://packagist.org/packages/qxsch/worker-pool)\r\n\r\n**Parallel Processing WorkerPool for PHP**\r\n\r\n_This library is in its infancy. I am adding features to it as anyone requires them._\r\n\r\n## Examples\r\n\r\n\r\nThe WorkerPool class provides a very simple interface to pass data to a worker pool and have it processed.\r\nYou can at any time fetch the results from the workers. Each worker child can return any value that can be [serialized][serialize].\r\n\r\n### A simple example\r\n\r\n```php\r\n<?php\r\n\r\n$wp=new \\QXS\\WorkerPool\\WorkerPool();\r\n$wp->setWorkerPoolSize(4)\r\n   ->create(new \\QXS\\WorkerPool\\ClosureWorker(\r\n                        /**\r\n                          * @param mixed $input the input from the WorkerPool::run() Method\r\n                          * @param \\QXS\\WorkerPool\\Semaphore $semaphore the semaphore to synchronize calls accross all workers\r\n                          * @param \\ArrayObject $storage a persistent storage for the current child process\r\n                          */\r\n                        function($input, $semaphore, $storage) {\r\n                                echo \"[\".getmypid().\"]\".\" hi $input\\n\";\r\n                                sleep(rand(1,3)); // this is the working load!\r\n                                return $input; // return null here, in case you do not want to pass any data to the parent \r\n                        }\r\n                )\r\n);\r\n\r\n\r\nfor($i=0; $i<10; $i++) {\r\n        $wp->run($i);\r\n}\r\n\r\n$wp->waitForAllWorkers(); // wait for all workers\r\n\r\nforeach($wp as $val) {\r\n        var_dump($val);  // dump the returned values\r\n}\r\n\r\n```\r\n\r\n### A more sophisticated example\r\n\r\n```php\r\n<?php\r\n\r\nuse QXS\\WorkerPool\\WorkerPool;\r\nuse QXS\\WorkerPool\\Worker;\r\nuse QXS\\WorkerPool\\Semaphore;\r\n\r\n\r\n/**\r\n * Our Worker Class\r\n */\r\nClass MyWorker implements Worker {\r\n        protected $sem;\r\n        /**\r\n         * after the worker has been forked into another process\r\n         *\r\n         * @param \\QXS\\WorkerPool\\Semaphore $semaphore the semaphore to run synchronized tasks\r\n         * @throws \\Exception in case of a processing Error an Exception will be thrown\r\n         */\r\n        public function onProcessCreate(Semaphore $semaphore) {\r\n                // semaphore can be used in the run method to synchronize the workers\r\n                $this->sem=$semaphore;\r\n                // write something to the stdout\r\n                echo \"\\t[\".getmypid().\"] has been created.\\n\";\r\n                // initialize mt_rand\r\n                list($usec, $sec) = explode(' ', microtime());\r\n                mt_srand( (float) $sec + ((float) $usec * 100000) );\r\n        }\r\n        /**\r\n         * before the worker process is getting destroyed\r\n         *\r\n         * @throws \\Exception in case of a processing Error an Exception will be thrown\r\n         */\r\n        public function onProcessDestroy() {\r\n                // write something to the stdout\r\n                echo \"\\t[\".getmypid().\"] will be destroyed.\\n\";\r\n        }\r\n        /**\r\n         * run the work\r\n         *\r\n         * @param Serializeable $input the data, that the worker should process\r\n         * @return Serializeable Returns the result\r\n         * @throws \\Exception in case of a processing Error an Exception will be thrown\r\n         */\r\n        public function run($input) {\r\n                $input=(string)$input;\r\n                echo \"\\t[\".getmypid().\"] Hi $input\\n\";\r\n                sleep(mt_rand(0,10)); // this is the workload!\r\n                // and sometimes exceptions might occur\r\n                if(mt_rand(0,10)==9) {\r\n                        throw new \\RuntimeException('We have a problem for '.$input.'.');\r\n                }\r\n                return \"Hi $input\"; // return null here, in case you do not want to pass any data to the parent\r\n        }\r\n}\r\n\r\n\r\n$wp=new WorkerPool();\r\n$wp->setWorkerPoolSize(10)\r\n   ->create(new MyWorker());\r\n\r\n// produce some tasks\r\nfor($i=1; $i<=50; $i++) {\r\n        $wp->run($i);\r\n}\r\n\r\n// some statistics\r\necho \"Busy Workers:\".$wp->getBusyWorkers().\"  Free Workers:\".$wp->getFreeWorkers().\"\\n\";\r\n\r\n// wait for completion of all tasks\r\n$wp->waitForAllWorkers();\r\n\r\n// collect all the results\r\nforeach($wp as $val) {\r\n        if(isset($val['data'])) {\r\n                echo \"RESULT: \".$val['data'].\"\\n\";\r\n        }\r\n        elseif(isset($val['workerException'])) {\r\n                echo \"WORKER EXCEPTION: \".$val['workerException']['class'].\": \".$val['workerException']['message'].\"\\n\".$val['workerException']['trace'].\"\\n\";\r\n        }\r\n        elseif(isset($val['poolException'])) {\r\n                echo \"POOL EXCEPTION: \".$val['poolException']['class'].\": \".$val['poolException']['message'].\"\\n\".$val['poolException']['trace'].\"\\n\";\r\n        }\r\n}\r\n\r\n\r\n// write something, before the parent exits\r\necho \"ByeBye\\n\";\r\n\r\n```\r\n\r\n### Transparent output to ps\r\n\r\nSee what's happening when running a PS:\r\n\r\n```\r\nroot   2378   \\_ simpleExample.php: Parent\r\nroot   2379       \\_ simpleExample.php: Worker 1 of QXS\\WorkerPool\\ClosureWorker [busy]\r\nroot   2380       \\_ simpleExample.php: Worker 2 of QXS\\WorkerPool\\ClosureWorker [busy]\r\nroot   2381       \\_ simpleExample.php: Worker 3 of QXS\\WorkerPool\\ClosureWorker [free]\r\nroot   2382       \\_ simpleExample.php: Worker 4 of QXS\\WorkerPool\\ClosureWorker [free]\r\n```\r\n\r\n### Documentation\r\n\r\nThe documentation can be found here http://qxsch.github.io/WorkerPool/doc/\r\n\r\n  [serialize]: http://php.net/serialize\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}